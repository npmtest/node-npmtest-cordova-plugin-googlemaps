{"/home/travis/build/npmtest/node-npmtest-cordova-plugin-googlemaps/test.js":"/* istanbul instrument in package npmtest_cordova_plugin_googlemaps */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-googlemaps/lib.npmtest_cordova_plugin_googlemaps.js":"/* istanbul instrument in package npmtest_cordova_plugin_googlemaps */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cordova_plugin_googlemaps = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cordova_plugin_googlemaps = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-googlemaps/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cordova-plugin-googlemaps && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cordova_plugin_googlemaps */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cordova_plugin_googlemaps\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cordova_plugin_googlemaps.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cordova_plugin_googlemaps.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cordova_plugin_googlemaps.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cordova_plugin_googlemaps.__dirname + '/lib.npmtest_cordova_plugin_googlemaps.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-googlemaps/node_modules/cordova-plugin-googlemaps/www/googlemaps-cdv-plugin.js":"/* global cordova, plugin, CSSPrimitiveValue */\nvar PLUGIN_NAME = 'GoogleMaps';\nvar MARKERS = {};\nvar KML_LAYERS = {};\nvar OVERLAYS = {};\n\n/**\n * Google Maps model.\n */\nvar BaseClass = function() {\n    var self = this;\n    var _vars = {};\n    var _listeners = {};\n\n    self.empty = function() {\n        for (var key in Object.keys(_vars)) {\n            _vars[key] = null;\n            delete _vars[key];\n        }\n    };\n\n    self.deleteFromObject = function(object, type) {\n        if (object === null) return object;\n        for(var index in Object.keys(object)) {\n            var key = Object.keys(object)[index];\n            if (typeof object[key] === 'object') {\n               object[key] = self.deleteFromObject(object[key], type);\n            } else if (typeof object[key] === type) {\n               delete object[key];\n            }\n        }\n        return object;\n    };\n\n    self.get = function(key) {\n        return key in _vars ? _vars[key] : null;\n    };\n    self.set = function(key, value) {\n        if (_vars[key] !== value) {\n            self.trigger(key + \"_changed\", _vars[key], value);\n        }\n        _vars[key] = value;\n    };\n\n    self.trigger = function(eventName) {\n        var args = [];\n        for (var i = 1; i < arguments.length; i++) {\n            args.push(arguments[i]);\n        }\n        var event = document.createEvent('Event');\n        event.initEvent(eventName, false, false);\n        event.mydata = args;\n        event.myself = self;\n        document.dispatchEvent(event);\n    };\n    self.on = function(eventName, callback) {\n        _listeners[eventName] = _listeners[eventName] || [];\n\n        var listener = function(e) {\n            if (!e.myself || e.myself !== self) {\n                return;\n            }\n            callback.apply(self, e.mydata);\n        };\n        document.addEventListener(eventName, listener, false);\n        _listeners[eventName].push({\n            'callback': callback,\n            'listener': listener\n        });\n    };\n    self.addEventListener = self.on;\n\n    self.off = function(eventName, callback) {\n        var i;\n        if (typeof eventName === \"string\") {\n            if (eventName in _listeners) {\n\n                if (typeof callback === \"function\") {\n                    for (i = 0; i < _listeners[eventName].length; i++) {\n                        if (_listeners[eventName][i].callback === callback) {\n                            document.removeEventListener(eventName, _listeners[eventName][i].listener);\n                            _listeners[eventName].splice(i, 1);\n                            break;\n                        }\n                    }\n                } else {\n                    for (i = 0; i < _listeners[eventName].length; i++) {\n                        document.removeEventListener(eventName, _listeners[eventName][i].listener);\n                    }\n                    delete _listeners[eventName];\n                }\n            }\n        } else {\n            //Remove all event listeners except 'keepWatching_changed'\n            var eventNames = Object.keys(_listeners);\n            for (i = 0; i < eventNames.length; i++) {\n                eventName = eventNames[i];\n                if ( eventName !== 'keepWatching_changed' ) {\n                    for (var j = 0; j < _listeners[eventName].length; j++) {\n                        document.removeEventListener(eventName, _listeners[eventName][j].listener);\n                    }\n                    delete _listeners[eventName];\n                }\n            }\n            _listeners = {};\n        }\n    };\n\n    self.removeEventListener = self.off;\n\n\n    self.one = function(eventName, callback) {\n        _listeners[eventName] = _listeners[eventName] || [];\n\n        var listener = function(e) {\n            if (!e.myself || e.myself !== self) {\n                return;\n            }\n            callback.apply(self, e.mydata);\n            self.off(eventName, callback);\n        };\n        document.addEventListener(eventName, listener, false);\n        _listeners[eventName].push({\n            'callback': callback,\n            'listener': listener\n        });\n    };\n    self.addEventListenerOnce = self.one;\n\n    self.errorHandler = function(msg) {\n        if (msg) {\n            console.error(msg);\n            self.trigger('error', msg);\n        }\n        return false;\n    };\n\n    return self;\n};\nvar App = function() {\n    BaseClass.apply(this);\n    Object.defineProperty(this, \"type\", {\n        value: \"Map\",\n        writable: false\n    });\n};\nApp.prototype = new BaseClass();\n\n//-------------\n// Cluster\n//-------------\n\nApp.prototype.updateCluster = function(callback) {\n    var self = this;\n    cordova.exec(function(result) {\n        if (callback) {\n            callback();\n        };\n    }, self.errorHandler, PLUGIN_NAME, 'exec', ['GoogleMapsClusterViewController.updateCluster']);\n};\n\n/*\n * Callback from Native\n */\n\nApp.prototype._onClusterEvent = function(eventName, obj) {\n    if (isNaN(obj)) {\n        this.trigger.apply(this, ['cluster_click', JSON.parse(obj)]);\n    }\n};\n\nApp.prototype._onMarkerEvent = function(eventName, hashCode) {\n    var marker = MARKERS[hashCode] || null;\n    if (marker) {\n        marker.trigger(eventName, marker);\n    }\n};\n\nApp.prototype._onOverlayEvent = function(eventName, hashCode) {\n    var overlay = OVERLAYS[hashCode] || null;\n    if (overlay) {\n        var args = [eventName, overlay];\n        for (var i = 2; i < arguments.length; i++) {\n            args.push(arguments[i]);\n        }\n        overlay.trigger.apply(this, args);\n    }\n};\n\n/*\n * Callback from Native\n */\nApp.prototype._onKmlEvent = function(eventName, objectType, kmlLayerId, result, options) {\n    var kmlLayer = KML_LAYERS[kmlLayerId] || null;\n    if (kmlLayer) {\n        var self = this;\n        var args = [eventName];\n        if (eventName === \"add\") {\n            var overlay = null;\n\n            switch ((objectType + \"\").toLowerCase()) {\n                case \"marker\":\n                    overlay = new Marker(self, result.id, options);\n                    MARKERS[result.id] = overlay;\n                    args.push({\n                        \"type\": \"Marker\",\n                        \"object\": overlay\n                    });\n                    overlay.on(plugin.google.maps.event.MARKER_CLICK, function() {\n                        kmlLayer.trigger(plugin.google.maps.event.OVERLAY_CLICK, overlay, overlay.getPosition());\n                    });\n                    break;\n\n                case \"polygon\":\n                    overlay = new Polygon(self, result.id, options);\n                    args.push({\n                        \"type\": \"Polygon\",\n                        \"object\": overlay\n                    });\n\n                    overlay.on(plugin.google.maps.event.OVERLAY_CLICK, function(latLng) {\n                        kmlLayer.trigger(plugin.google.maps.event.OVERLAY_CLICK, overlay, latLng);\n                    });\n                    break;\n\n                case \"polyline\":\n                    overlay = new Polyline(self, result.id, options);\n                    args.push({\n                        \"type\": \"Polyline\",\n                        \"object\": overlay\n                    });\n                    overlay.on(plugin.google.maps.event.OVERLAY_CLICK, function(latLng) {\n                        kmlLayer.trigger(plugin.google.maps.event.OVERLAY_CLICK, overlay, latLng);\n                    });\n                    break;\n            }\n            if (overlay) {\n                OVERLAYS[result.id] = overlay;\n                overlay.hashCode = result.hashCode;\n                kmlLayer._overlays.push(overlay);\n                kmlLayer.on(\"_REMOVE\", function() {\n                    var idx = kmlLayer._overlays.indexOf(overlay);\n                    if (idx > -1) {\n                        kmlLayer._overlays.splice(idx, 1);\n                    }\n                    overlay.remove();\n                    overlay.off();\n                });\n            }\n        } else {\n            for (var i = 2; i < arguments.length; i++) {\n                args.push(arguments[i]);\n            }\n        }\n        //kmlLayer.trigger.apply(kmlLayer, args);\n    }\n};\n\n/**\n * Callback from Native\n */\nApp.prototype._onMapEvent = function(eventName) {\n    var args = [eventName];\n    for (var i = 1; i < arguments.length; i++) {\n        if (typeof(arguments[i]) === \"string\") {\n            if ([\"true\", \"false\"].indexOf(arguments[i].toLowerCase()) > -1) {\n                arguments[i] = parseBoolean(arguments[i]);\n            }\n        }\n        args.push(arguments[i]);\n    }\n    args.push(this);\n    this.trigger.apply(this, args);\n};\n/**\n * Callback from Native\n */\nApp.prototype._onMyLocationChange = function(params) {\n    var location = new Location(params);\n    this.trigger('my_location_change', location, this);\n};\n/**\n * Callback from Native\n */\nApp.prototype._onCameraEvent = function(eventName, params) {\n    var cameraPosition = new CameraPosition(params);\n    this.trigger(eventName, cameraPosition, this);\n};\n\n\nApp.prototype.getMap = function(div, params) {\n     // Redraw the browser mandatory (especially for iOS)\n    document.body.style.backgroundColor=\"rgba(0,0,0,0.1)\";\n    \n    var self = this,\n        args = [];\n\n    if (!isDom(div)) {\n        params = div;\n        params = params || {};\n        params.backgroundColor = params.backgroundColor || '#ffffff';\n        params.backgroundColor = HTMLColor2RGBA(params.backgroundColor);\n        if (params.camera && params.camera.latLng) {\n          params.camera.target = params.camera.latLng;\n          delete params.camera.latLng;\n        }\n        args.push(params);\n    } else {\n\n        var currentDiv = self.get(\"div\");\n        if (currentDiv !== div && currentDiv) {\n            var children = getAllChildren(currentDiv);\n            for (var i = 0; i < children.length; i++) {\n                element = children[i];\n                elemId = element.getAttribute(\"__pluginDomId\");\n                element.removeAttribute(\"__pluginDomId\");\n            }\n            currentDiv.removeEventListener(\"DOMNodeRemoved\", _remove_child);\n\n            while (currentDiv) {\n                if (currentDiv.style) {\n                    currentDiv.style.backgroundColor = '';\n                }\n                if (currentDiv.classList) {\n                    currentDiv.classList.remove('_gmaps_cdv_');\n                } else if (currentDiv.className) {\n                    currentDiv.className = currentDiv.className.replace(/_gmaps_cdv_/g, \"\");\n                    currentDiv.className = currentDiv.className.replace(/\\s+/g, \" \");\n                }\n                currentDiv = currentDiv.parentNode;\n            }\n            self.set(\"div\", null);\n            self.set(\"keepWatching\", false);\n        }\n\n\n        var children = getAllChildren(div);\n        params = params || {};\n        params.backgroundColor = params.backgroundColor || '#ffffff';\n        params.backgroundColor = HTMLColor2RGBA(params.backgroundColor);\n        if (params.camera && params.camera.latLng) {\n          params.camera.target = params.camera.latLng;\n          delete params.camera.latLng;\n        }\n        if (params.styles) {\n          params.styles = JSON.stringify(params.styles);\n        }\n        args.push(params);\n\n        self.set(\"div\", div);\n        args.push(getDivRect(div));\n        var elements = [];\n        var elemId, clickable;\n\n        for (var i = 0; i < children.length; i++) {\n            element = children[i];\n            elemId = element.getAttribute(\"__pluginDomId\");\n            if (!elemId) {\n                elemId = \"pgm\" + Math.floor(Math.random() * Date.now()) + i;\n                element.setAttribute(\"__pluginDomId\", elemId);\n            }\n            elements.push({\n                id: elemId,\n                size: getDivRect(element)\n            });\n            i++;\n        }\n        args.push(elements);\n\n        div.addEventListener(\"DOMNodeRemoved\", _remove_child);\n        div.addEventListener(\"DOMNodeInserted\", _append_child);\n\n        self.set(\"keepWatching\", true);\n        var className;\n        while (div.parentNode) {\n            div.style.backgroundColor = 'rgba(0,0,0,0)';\n            className = div.className;\n\n            // prevent multiple readding the class\n            if (div.classList && !div.classList.contains('_gmaps_cdv_')) {\n                div.classList.add('_gmaps_cdv_');\n            } else if (div.className && !div.className.indexOf('_gmaps_cdv_') == -1) {\n                div.className = div.className + ' _gmaps_cdv_';\n            }\n\n            div = div.parentNode;\n        }\n    }\n    cordova.exec(function() {\n        setTimeout(function() {\n            self.refreshLayout();\n            self.trigger(plugin.google.maps.event.MAP_READY, self);\n        }, 100);\n    }, self.errorHandler, PLUGIN_NAME, 'getMap', self.deleteFromObject(args,'function'));\n    return self;\n};\n\n\nApp.prototype.getLicenseInfo = function(callback) {\n    var self = this;\n    cordova.exec(function(txt) {\n        callback.call(self, txt);\n    }, self.errorHandler, PLUGIN_NAME, 'getLicenseInfo', []);\n};\n\n\n/**\n * @desc get watchDogTimer value for map positioning changes\n */\nApp.prototype.getWatchDogTimer = function() {\n    var self = this;\n    time = self.get('watchDogTimer') || 100;\n    return time;\n};\n\n/**\n * @desc Set watchDogTimer for map positioning changes\n */\nApp.prototype.setWatchDogTimer = function(time) {\n    var self = this;\n    time = time || 100;\n    self.set('watchDogTimer', time);\n\n    if (time < 50) {\n        //console.log('Warning: watchdog values under 50ms will drain battery a lot. Just use for short operation times.');\n    }\n\n};\n\nfunction onBackbutton() {\n    _mapInstance.closeDialog();\n}\n\n/**\n * @desc Open the map dialog\n */\nApp.prototype.showDialog = function() {\n    document.addEventListener(\"backbutton\", onBackbutton, false);\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'showDialog', []);\n};\n\n/**\n * @desc Close the map dialog\n */\nApp.prototype.closeDialog = function() {\n    document.removeEventListener(\"backbutton\", onBackbutton, false);\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'closeDialog', []);\n};\n\nApp.prototype.setOptions = function(options) {\n    options = options || {};\n    if (options.hasOwnProperty('backgroundColor')) {\n        options.backgroundColor = HTMLColor2RGBA(options.backgroundColor);\n    }\n    if (options.camera && options.camera.latLng) {\n      options.camera.target = options.camera.latLng;\n      delete options.camera.latLng;\n    }\n    if (options.styles) {\n      options.styles = JSON.stringify(options.styles);\n    }\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['Map.setOptions', this.deleteFromObject(options,'function')]);\n};\n\nApp.prototype.setCenter = function(latLng) {\n    this.set('center', latLng);\n    cordova.exec(null, this.errorHandler,\n        PLUGIN_NAME, 'exec', ['Map.setCenter', latLng.lat, latLng.lng]);\n};\n\nApp.prototype.setZoom = function(zoom) {\n    this.set('zoom', zoom);\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['Map.setZoom', zoom]);\n};\nApp.prototype.panBy = function(x, y) {\n    x = parseInt(x, 10);\n    y = parseInt(y, 10);\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['Map.panBy', x, y]);\n};\n\n/**\n * @desc Change the map type\n * @param {String} mapTypeId   Specifies the one of the follow strings:\n *                               MAP_TYPE_HYBRID\n *                               MAP_TYPE_SATELLITE\n *                               MAP_TYPE_TERRAIN\n *                               MAP_TYPE_NORMAL\n *                               MAP_TYPE_NONE\n */\nApp.prototype.setMapTypeId = function(mapTypeId) {\n    if (mapTypeId !== plugin.google.maps.MapTypeId[mapTypeId.replace(\"MAP_TYPE_\", '')]) {\n        return this.errorHandler(\"Invalid MapTypeId was specified.\");\n    }\n    this.set('mapTypeId', mapTypeId);\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['Map.setMapTypeId', mapTypeId]);\n};\n\n/**\n * @desc Change the map view angle\n * @param {Number} tilt  The angle\n */\nApp.prototype.setTilt = function(tilt) {\n    this.set('tilt', tilt);\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['Map.setTilt', tilt]);\n};\n\n\n/**\n * @desc   Move the map camera with animation\n * @params {CameraPosition} cameraPosition New camera position\n * @params {Function} [callback] This callback is involved when the animation is completed.\n */\nApp.prototype.animateCamera = function(cameraPosition, callback) {\n    var self = this;\n    if (cameraPosition.target && cameraPosition.target.type === \"LatLngBounds\") {\n        cameraPosition.target = [cameraPosition.target.southwest, cameraPosition.target.northeast];\n    }\n\n    if (!cameraPosition.hasOwnProperty('zoom')) {\n        self.getZoom(function(zoom) {\n            cameraPosition.zoom = zoom;\n        });\n    }\n\n    if (!cameraPosition.hasOwnProperty('tilt')) {\n        self.getTilt(function(tilt) {\n            cameraPosition.tilt = tilt;\n        });\n    }\n\n    if (!cameraPosition.hasOwnProperty('bearing')) {\n        self.getBearing(function(bearing) {\n            cameraPosition.bearing = bearing;\n        });\n    }\n\n    var self = this;\n    setTimeout(function() {\n        cordova.exec(function() {\n            if (typeof callback === \"function\") {\n                callback.call(self);\n            }\n        }, self.errorHandler, PLUGIN_NAME, 'exec', ['Map.animateCamera', self.deleteFromObject(cameraPosition,'function')]);\n    }.bind(self), 10);\n\n\n};\n/**\n * @desc   Move the map camera without animation\n * @params {CameraPosition} cameraPosition New camera position\n * @params {Function} [callback] This callback is involved when the animation is completed.\n */\nApp.prototype.moveCamera = function(cameraPosition, callback) {\n    if (cameraPosition.target &&\n        cameraPosition.target.type === \"LatLngBounds\") {\n        cameraPosition.target = [cameraPosition.target.southwest, cameraPosition.target.northeast];\n    }\n    var self = this;\n\n    if (!cameraPosition.hasOwnProperty('zoom')) {\n        self.getZoom(function(zoom) {\n            cameraPosition.zoom = zoom;\n        });\n    }\n\n    if (!cameraPosition.hasOwnProperty('tilt')) {\n        self.getTilt(function(tilt) {\n            cameraPosition.tilt = tilt;\n        });\n    }\n\n    if (!cameraPosition.hasOwnProperty('bearing')) {\n        self.getBearing(function(bearing) {\n            cameraPosition.bearing = bearing;\n        });\n    }\n\n    setTimeout(function() {\n        cordova.exec(function() {\n            if (typeof callback === \"function\") {\n                callback.call(self);\n            }\n        }, self.errorHandler, PLUGIN_NAME, 'exec', ['Map.moveCamera', self.deleteFromObject(cameraPosition,'function')]);\n    }.bind(self), 10);\n\n};\n\nApp.prototype.setMyLocationEnabled = function(enabled) {\n    enabled = parseBoolean(enabled);\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['Map.setMyLocationEnabled', enabled]);\n};\nApp.prototype.setIndoorEnabled = function(enabled) {\n    enabled = parseBoolean(enabled);\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['Map.setIndoorEnabled', enabled]);\n};\nApp.prototype.setTrafficEnabled = function(enabled) {\n    enabled = parseBoolean(enabled);\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['Map.setTrafficEnabled', enabled]);\n};\nApp.prototype.setCompassEnabled = function(enabled) {\n    var self = this;\n    enabled = parseBoolean(enabled);\n    cordova.exec(null, self.errorHandler, PLUGIN_NAME, 'exec', ['Map.setCompassEnabled', enabled]);\n};\nApp.prototype.getMyLocation = function(params, success_callback, error_callback) {\n    var args = [params || {}, success_callback || null, error_callback];\n    if (typeof args[0] === \"function\") {\n        args.unshift({});\n    }\n    params = args[0];\n    success_callback = args[1];\n    error_callback = args[2];\n\n    params.enableHighAccuracy = params.enableHighAccuracy  === true;\n    var self = this;\n    var successHandler = function(location) {\n        if (typeof success_callback === \"function\") {\n            location.latLng = new LatLng(location.latLng.lat, location.latLng.lng);\n            success_callback.call(self, location);\n        }\n    };\n    var errorHandler = function(result) {\n        if (typeof error_callback === \"function\") {\n            error_callback.call(self, result);\n        }\n    };\n    cordova.exec(successHandler, errorHandler, PLUGIN_NAME, 'getMyLocation', [self.deleteFromObject(params,'function')]);\n};\nApp.prototype.getFocusedBuilding = function(callback) {\n    var self = this;\n    cordova.exec(callback, this.errorHandler, PLUGIN_NAME, 'getFocusedBuilding', []);\n};\nApp.prototype.setVisible = function(isVisible) {\n    var self = this;\n    isVisible = parseBoolean(isVisible);\n    cordova.exec(null, self.errorHandler, PLUGIN_NAME, 'setVisible', [isVisible]);\n};\nApp.prototype.setClickable = function(isClickable) {\n    var self = this;\n    isClickable = parseBoolean(isClickable);\n    cordova.exec(null, self.errorHandler, PLUGIN_NAME, 'pluginLayer_setClickable', [isClickable]);\n};\n\nApp.prototype.setBackgroundColor = function(color) {\n    this.set('strokeColor', color);\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'pluginLayer_setBackGroundColor', [HTMLColor2RGBA(color)]);\n};\n\n\nApp.prototype.setDebuggable = function(debug) {\n    var self = this;\n    debug = parseBoolean(debug);\n    cordova.exec(null, self.errorHandler, PLUGIN_NAME, 'pluginLayer_setDebuggable', [debug]);\n};\n\n/**\n * Sets the preference for whether all gestures should be enabled or disabled.\n */\nApp.prototype.setAllGesturesEnabled = function(enabled) {\n    var self = this;\n    enabled = parseBoolean(enabled);\n    cordova.exec(null, self.errorHandler, PLUGIN_NAME, 'exec', ['Map.setAllGesturesEnabled', enabled]);\n};\n\n/**\n * Return the current position of the camera\n * @return {CameraPosition}\n */\nApp.prototype.getCameraPosition = function(callback) {\n    var self = this;\n    cordova.exec(function(camera) {\n        if (typeof callback === \"function\") {\n            camera.target = new LatLng(camera.target.lat, camera.target.lng);\n            callback.call(self, camera);\n        }\n    }, self.errorHandler, PLUGIN_NAME, 'exec', ['Map.getCameraPosition']);\n};\n\n\nApp.prototype.getZoom = function(callback) {\n    var self = this;\n    cordova.exec(function(camera) {\n        if (typeof callback === \"function\") {\n            callback.call(self, camera.zoom);\n        }\n    }, self.errorHandler, PLUGIN_NAME, 'exec', ['Map.getCameraPosition']);\n};\n\nApp.prototype.getTilt = function(callback) {\n    var self = this;\n    cordova.exec(function(camera) {\n        if (typeof callback === \"function\") {\n            callback.call(self, camera.tilt);\n        }\n    }, self.errorHandler, PLUGIN_NAME, 'exec', ['Map.getCameraPosition']);\n};\n\nApp.prototype.getBearing = function(callback) {\n    var self = this;\n    cordova.exec(function(camera) {\n        if (typeof callback === \"function\") {\n            callback.call(self, camera.bearing);\n        }\n    }, self.errorHandler, PLUGIN_NAME, 'exec', ['Map.getCameraPosition']);\n};\n\n/**\n * Clears all markup that has been added to the map,\n * including markers, polylines and ground overlays.\n */\nApp.prototype.clear = function(callback) {\n    var self = this;\n\n    var clearObj = function (obj) {\n        var ids = Object.keys(obj);\n        var id;\n        for (var i = 0; i < ids.length; i++) {\n            id = ids[i];\n            obj[id].off();\n            delete obj[id];\n        }\n        obj = {};\n    };\n\n    clearObj(OVERLAYS);\n    clearObj(MARKERS);\n    clearObj(KML_LAYERS);\n\n    cordova.exec(function() {\n        if (typeof callback === \"function\") {\n            callback.call(self);\n        }\n    }, self.errorHandler, PLUGIN_NAME, 'clear', []);\n};\n\n/**\n * Remove the map completely.\n */\nApp.prototype.remove = function(callback) {\n    var self = this;\n    var div = this.get('div');\n    if (div) {\n        while (div) {\n            if (div.style) {\n                div.style.backgroundColor = '';\n            }\n            if (div.classList) {\n                div.classList.remove('_gmaps_cdv_');\n            } else if (div.className) {\n                div.className = div.className.replace(/_gmaps_cdv_/g, \"\");\n                div.className = div.className.replace(/\\s+/g, \" \");\n            }\n            div = div.parentNode;\n        }\n    }\n    this.set('div', undefined);\n    self.set(\"keepWatching\", false);\n    this.clear();\n    this.empty();\n    this.off();\n    cordova.exec(function() {\n        if (typeof callback === \"function\") {\n            callback.call(self);\n        }\n    }, self.errorHandler, PLUGIN_NAME, 'remove', []);\n};\n\nApp.prototype.refreshLayout = function() {\n    onMapResize(undefined, false);\n};\n\nApp.prototype.isAvailable = function(callback) {\n    var self = this;\n\n    /*\n    var tmpmap = plugin.google.maps.Map.getMap(document.createElement(\"div\"), {});\n    tmpmap.remove();\n    tmpmap = null;\n    */\n\n    cordova.exec(function() {\n        if (typeof callback === \"function\") {\n            callback.call(self, true);\n        }\n    }, function(message) {\n        if (typeof callback === \"function\") {\n            callback.call(self, false, message);\n        }\n    }, PLUGIN_NAME, 'isAvailable', ['']);\n};\n\nApp.prototype.toDataURL = function(params, callback) {\n    var args = [params || {}, callback];\n    if (typeof args[0] === \"function\") {\n        args.unshift({});\n    }\n\n    params = args[0];\n    callback = args[1];\n\n    params.uncompress = params.uncompress === true;\n    var self = this;\n    cordova.exec(function(image) {\n        if (typeof callback === \"function\") {\n            callback.call(self, image);\n        }\n    }, self.errorHandler, PLUGIN_NAME, 'exec', ['Map.toDataURL', self.deleteFromObject(params,'function')]);\n};\n\nvar _append_child = function(event) {\n    event = event || window.event;\n    event = event || {};\n    var target = event.srcElement;\n    if (!target || \"nodeType\" in target == false) {\n        return;\n    }\n    if (target.nodeType != 1) {\n        return;\n    }\n    var size = getDivRect(target);\n    var elemId = \"pgm\" + Math.floor(Math.random() * Date.now());\n    target.setAttribute(\"__pluginDomId\", elemId);\n\n    cordova.exec(null, null, PLUGIN_NAME, 'pluginLayer_pushHtmlElement', [elemId, size]);\n};\n\nvar _remove_child = function(event) {\n    event = event || window.event;\n    event = event || {};\n    var target = event.srcElement;\n    if (!target || \"nodeType\" in target == false) {\n        return;\n    }\n    if (target.nodeType != 1) {\n        return;\n    }\n    var elemId = target.getAttribute(\"__pluginDomId\");\n    if (!elemId) {\n        return;\n    }\n    target.removeAttribute(\"__pluginDomId\");\n    cordova.exec(null, null, PLUGIN_NAME, 'pluginLayer_removeHtmlElement', [elemId]);\n};\n\n/**\n * Show the map into the specified div.\n */\nApp.prototype.setDiv = function(div) {\n    var self = this,\n        args = [],\n        element;\n\n    var currentDiv = self.get(\"div\");\n    if (isDom(div) === false || currentDiv !== div) {\n        if (currentDiv) {\n            var children = getAllChildren(currentDiv);\n            for (var i = 0; i < children.length; i++) {\n                element = children[i];\n                elemId = element.getAttribute(\"__pluginDomId\");\n                element.removeAttribute(\"__pluginDomId\");\n            }\n            currentDiv.removeEventListener(\"DOMNodeRemoved\", _remove_child);\n\n            while (currentDiv) {\n                if (currentDiv.style) {\n                    currentDiv.style.backgroundColor = '';\n                }\n                if (currentDiv.classList) {\n                    currentDiv.classList.remove('_gmaps_cdv_');\n                } else if (currentDiv.className) {\n                    currentDiv.className = currentDiv.className.replace(/_gmaps_cdv_/g, \"\");\n                    currentDiv.className = currentDiv.className.replace(/\\s+/g, \" \");\n                }\n                currentDiv = currentDiv.parentNode;\n            }\n        }\n        self.set(\"div\", null);\n        self.set(\"keepWatching\", false);\n    }\n\n    if (isDom(div)) {\n        var children = getAllChildren(div);;\n        self.set(\"div\", div);\n        args.push(getDivRect(div));\n        var elements = [];\n        var elemId;\n        var clickable;\n\n        for (var i = 0; i < children.length; i++) {\n            element = children[i];\n            if (element.nodeType != 1) {\n                continue;\n            }\n            clickable = element.getAttribute(\"data-clickable\");\n            if (clickable && parseBoolean(clickable) == false) {\n                continue;\n            }\n            elemId = element.getAttribute(\"__pluginDomId\");\n            if (!elemId) {\n                elemId = \"pgm\" + Math.floor(Math.random() * Date.now()) + i;\n                element.setAttribute(\"__pluginDomId\", elemId);\n            }\n            elements.push({\n                id: elemId,\n                size: getDivRect(element)\n            });\n        }\n        args.push(elements);\n\n        div.addEventListener(\"DOMNodeRemoved\", _remove_child);\n        div.addEventListener(\"DOMNodeInserted\", _append_child);\n\n        var className;\n        while (div.parentNode) {\n            div.style.backgroundColor = 'rgba(0,0,0,0)';\n            div.style.backgroundImage = '';\n            className = div.className;\n\n            // prevent multiple reading the class\n            if (div.classList && !div.classList.contains('_gmaps_cdv_')) {\n                div.classList.add('_gmaps_cdv_');\n            } else if (div.className && !div.className.indexOf('_gmaps_cdv_') == -1) {\n                div.className = div.className + ' _gmaps_cdv_';\n            }\n\n            div = div.parentNode;\n        }\n        setTimeout(function() {\n            self.refreshLayout();\n            self.set(\"keepWatching\", true);\n        }, 1000);\n    }\n    cordova.exec(null, self.errorHandler, PLUGIN_NAME, 'setDiv', self.deleteFromObject(args,'function'));\n};\n\n/**\n * Return the visible region of the map.\n * Thanks @fschmidt\n */\nApp.prototype.getVisibleRegion = function(callback) {\n    var self = this;\n\n    cordova.exec(function(result) {\n        if (typeof callback === \"function\") {\n            var latLngBounds = new LatLngBounds(result.latLngArray);\n            latLngBounds.northeast = new LatLng(result.northeast.lat, result.northeast.lng);\n            latLngBounds.southwest = new LatLng(result.southwest.lat, result.southwest.lng);\n            callback.call(self, latLngBounds);\n        }\n    }, self.errorHandler, PLUGIN_NAME, 'exec', ['Map.getVisibleRegion']);\n};\n\n/**\n * Maps an Earth coordinate to a point coordinate in the map's view.\n */\nApp.prototype.fromLatLngToPoint = function(latLng, callback) {\n    var self = this;\n    if (\"lat\" in latLng && \"lng\" in latLng) {\n        cordova.exec(function(result) {\n            if (typeof callback === \"function\") {\n                callback.call(self, result);\n            }\n        }, self.errorHandler, PLUGIN_NAME, 'exec', ['Map.fromLatLngToPoint', latLng.lat, latLng.lng]);\n    } else {\n        if (typeof callback === \"function\") {\n            callback.call(self, [undefined, undefined]);\n        }\n    }\n\n};\n/**\n * Maps a point coordinate in the map's view to an Earth coordinate.\n */\nApp.prototype.fromPointToLatLng = function(pixel, callback) {\n    var self = this;\n    if (pixel.length == 2 && Array.isArray(pixel)) {\n        cordova.exec(function(result) {\n            if (typeof callback === \"function\") {\n                var latLng = new LatLng(result[0] || 0, result[1] || 0);\n                callback.call(self, result);\n            }\n        }, self.errorHandler, PLUGIN_NAME, 'exec', ['Map.fromPointToLatLng', pixel[0], pixel[1]]);\n    } else {\n        if (typeof callback === \"function\") {\n            callback.call(self, [undefined, undefined]);\n        }\n    }\n\n};\n\nApp.prototype.setPadding = function(p1, p2, p3, p4) {\n    if (arguments.length === 0 || arguments.length > 4) {\n        return;\n    }\n    var padding = {};\n    padding.top = parseInt(p1, 10);\n    switch (arguments.length) {\n        case 4:\n            // top right bottom left\n            padding.right = parseInt(p2, 10);\n            padding.bottom = parseInt(p3, 10);\n            padding.left = parseInt(p4, 10);\n            break;\n\n        case 3:\n            // top right&left bottom\n            padding.right = parseInt(p2, 10);\n            padding.left = padding.right;\n            padding.bottom = parseInt(p3, 10);\n            break;\n\n        case 2:\n            // top & bottom right&left\n            padding.bottom = parseInt(p1, 10);\n            padding.right = parseInt(p2, 10);\n            padding.left = padding.right;\n            break;\n\n        case 1:\n            // top & bottom right & left\n            padding.bottom = padding.top;\n            padding.right = padding.top;\n            padding.left = padding.top;\n            break;\n    }\n    cordova.exec(function(result) {\n        if (typeof callback === \"function\") {\n            var latLng = new LatLng(result[0] || 0, result[1] || 0);\n            callback.call(self, result);\n        }\n    }, self.errorHandler, PLUGIN_NAME, 'exec', ['Map.setPadding', padding]);\n};\n\n//-------------\n// Marker\n//-------------\nApp.prototype.addMarker = function(markerOptions, callback) {\n    var self = this;\n    markerOptions.animation = markerOptions.animation || undefined;\n    markerOptions.position = markerOptions.position || {};\n    markerOptions.position.lat = markerOptions.position.lat || 0.0;\n    markerOptions.position.lng = markerOptions.position.lng || 0.0;\n    markerOptions.anchor = markerOptions.anchor || [0.5, 0.5];\n    markerOptions.draggable = markerOptions.draggable === true;\n    markerOptions.icon = markerOptions.icon || undefined;\n    markerOptions.snippet = markerOptions.snippet || undefined;\n    markerOptions.title = markerOptions.title !== undefined ? String(markerOptions.title) : undefined;\n    markerOptions.visible = markerOptions.visible === undefined ? true : markerOptions.visible;\n    markerOptions.flat = markerOptions.flat  === true;\n    markerOptions.rotation = markerOptions.rotation || 0;\n    markerOptions.opacity = parseFloat(\"\" + markerOptions.opacity, 10) || 1;\n    markerOptions.disableAutoPan = markerOptions.disableAutoPan === undefined ? false : markerOptions.disableAutoPan;\n    markerOptions.params = markerOptions.params || {};\n    if (\"styles\" in markerOptions) {\n        markerOptions.styles = typeof markerOptions.styles === \"object\" ? markerOptions.styles : {};\n\n        if (\"color\" in markerOptions.styles) {\n            markerOptions.styles.color = HTMLColor2RGBA(markerOptions.styles.color || \"#000000\");\n        }\n    }\n    if (markerOptions.icon && isHTMLColorString(markerOptions.icon)) {\n        markerOptions.icon = HTMLColor2RGBA(markerOptions.icon);\n    }\n\n\n    var markerClick = markerOptions.markerClick;\n    var infoClick = markerOptions.infoClick;\n\n    cordova.exec(function(result) {\n        markerOptions.hashCode = result.hashCode;\n        var marker = new Marker(self, result.id, markerOptions);\n\n        MARKERS[result.id] = marker;\n        OVERLAYS[result.id] = marker;\n\n        if (typeof markerClick === \"function\") {\n            marker.on(plugin.google.maps.event.MARKER_CLICK, markerClick);\n        }\n        if (typeof infoClick === \"function\") {\n            marker.on(plugin.google.maps.event.INFO_CLICK, infoClick);\n        }\n        if (typeof callback === \"function\") {\n            callback.call(self, marker, self);\n        }\n    }, self.errorHandler, PLUGIN_NAME, 'exec', ['Marker.createMarker', self.deleteFromObject(markerOptions,'function')]);\n};\n\n\n//-------------\n// Circle\n//-------------\nApp.prototype.addCircle = function(circleOptions, callback) {\n    var self = this;\n    circleOptions.center = circleOptions.center || {};\n    circleOptions.center.lat = circleOptions.center.lat || 0.0;\n    circleOptions.center.lng = circleOptions.center.lng || 0.0;\n    circleOptions.strokeColor = HTMLColor2RGBA(circleOptions.strokeColor || \"#FF0000\", 0.75);\n    circleOptions.fillColor = HTMLColor2RGBA(circleOptions.fillColor || \"#000000\", 0.75);\n    circleOptions.strokeWidth = circleOptions.strokeWidth || 10;\n    circleOptions.visible = circleOptions.visible === undefined ? true : circleOptions.visible;\n    circleOptions.zIndex = circleOptions.zIndex || 3;\n    circleOptions.radius = circleOptions.radius || 1;\n\n    cordova.exec(function(result) {\n        var circle = new Circle(self, result.id, circleOptions);\n        OVERLAYS[result.id] = circle;\n        if (typeof circleOptions.onClick === \"function\") {\n            circle.on(plugin.google.maps.event.OVERLAY_CLICK, circleOptions.onClick);\n        }\n        if (typeof callback === \"function\") {\n            callback.call(self, circle, self);\n        }\n    }, self.errorHandler, PLUGIN_NAME, 'exec', ['Circle.createCircle', self.deleteFromObject(circleOptions,'function')]);\n};\n//-------------\n// Polyline\n//-------------\nApp.prototype.addPolyline = function(polylineOptions, callback) {\n    var self = this;\n    polylineOptions.points = polylineOptions.points || [];\n    polylineOptions.color = HTMLColor2RGBA(polylineOptions.color || \"#FF000080\", 0.75);\n    polylineOptions.width = polylineOptions.width || 10;\n    polylineOptions.visible = polylineOptions.visible === undefined ? true : polylineOptions.visible;\n    polylineOptions.zIndex = polylineOptions.zIndex || 4;\n    polylineOptions.geodesic = polylineOptions.geodesic  === true;\n\n    cordova.exec(function(result) {\n        var polyline = new Polyline(self, result.id, polylineOptions);\n        OVERLAYS[result.id] = polyline;\n        /*if (typeof polylineOptions.onClick === \"function\") {\n          polyline.on(plugin.google.maps.event.OVERLAY_CLICK, polylineOptions.onClick);\n        }*/\n        if (typeof callback === \"function\") {\n            callback.call(self, polyline, self);\n        }\n    }, self.errorHandler, PLUGIN_NAME, 'exec', ['Polyline.createPolyline', self.deleteFromObject(polylineOptions,'function')]);\n};\n//-------------\n// Polygon\n//-------------\nApp.prototype.addPolygon = function(polygonOptions, callback) {\n    var self = this;\n    polygonOptions.points = polygonOptions.points || [];\n    polygonOptions.holes = polygonOptions.holes || [];\n    if (polygonOptions.holes.length > 0 && !Array.isArray(polygonOptions.holes[0])) {\n      polygonOptions.holes = [polygonOptions.holes];\n    }\n    polygonOptions.holes = polygonOptions.holes.map(function(hole) {\n      if (!Array.isArray(hole)) {\n        return [];\n      }\n      return hole.map(function(latLng) {\n        return {lat: latLng.lat, lng: latLng.lng};\n      });\n    });\n    polygonOptions.strokeColor = HTMLColor2RGBA(polygonOptions.strokeColor || \"#FF000080\", 0.75);\n    if (polygonOptions.fillColor) {\n        polygonOptions.fillColor = HTMLColor2RGBA(polygonOptions.fillColor, 0.75);\n    }\n    polygonOptions.strokeWidth = polygonOptions.strokeWidth || 10;\n    polygonOptions.visible = polygonOptions.visible === undefined ? true : polygonOptions.visible;\n    polygonOptions.zIndex = polygonOptions.zIndex || 2;\n    polygonOptions.geodesic = polygonOptions.geodesic  === true;\n\n    cordova.exec(function(result) {\n        var polygon = new Polygon(self, result.id, polygonOptions);\n        OVERLAYS[result.id] = polygon;\n        if (typeof polygonOptions.onClick === \"function\") {\n            polygon.on(plugin.google.maps.event.OVERLAY_CLICK, polygonOptions.onClick);\n        }\n        if (typeof callback === \"function\") {\n            callback.call(self, polygon, self);\n        }\n    }, self.errorHandler, PLUGIN_NAME, 'exec', ['Polygon.createPolygon', self.deleteFromObject(polygonOptions,'function')]);\n};\n\n//-------------\n// Tile overlay\n//-------------\nApp.prototype.addTileOverlay = function(tilelayerOptions, callback) {\n    var self = this;\n    tilelayerOptions = tilelayerOptions || {};\n    tilelayerOptions.tileUrlFormat = tilelayerOptions.tileUrlFormat || null;\n    if (typeof tilelayerOptions.tileUrlFormat !== \"string\") {\n        throw new Error(\"tilelayerOptions.tileUrlFormat should set a string.\");\n    }\n    tilelayerOptions.visible = tilelayerOptions.visible === undefined ? true : tilelayerOptions.visible;\n    tilelayerOptions.zIndex = tilelayerOptions.zIndex || 0;\n    tilelayerOptions.tileSize = tilelayerOptions.tileSize || 256;\n    tilelayerOptions.opacity = tilelayerOptions.opacity || 1;\n\n    cordova.exec(function(result) {\n        var tileOverlay = new TileOverlay(self, result.id, tilelayerOptions);\n        OVERLAYS[result.id] = tileOverlay;\n        /*\n        if (typeof tilelayerOptions.onClick === \"function\") {\n          tileOverlay.on(plugin.google.maps.event.OVERLAY_CLICK, tilelayerOptions.onClick);\n        }\n        */\n        if (typeof callback === \"function\") {\n            callback.call(self, tileOverlay, self);\n        }\n    }, self.errorHandler, PLUGIN_NAME, 'exec', ['TileOverlay.createTileOverlay', self.deleteFromObject(tilelayerOptions,'function')]);\n};\n//-------------\n// Ground overlay\n//-------------\nApp.prototype.addGroundOverlay = function(groundOverlayOptions, callback) {\n    var self = this;\n    groundOverlayOptions = groundOverlayOptions || {};\n    groundOverlayOptions.url = groundOverlayOptions.url || null;\n    groundOverlayOptions.visible = groundOverlayOptions.visible === undefined ? true : groundOverlayOptions.visible;\n    groundOverlayOptions.zIndex = groundOverlayOptions.zIndex || 1;\n    groundOverlayOptions.bounds = groundOverlayOptions.bounds || [];\n\n    cordova.exec(function(result) {\n        var groundOverlay = new GroundOverlay(self, result.id, groundOverlayOptions);\n        OVERLAYS[result.id] = groundOverlay;\n        if (typeof groundOverlayOptions.onClick === \"function\") {\n            groundOverlay.on(plugin.google.maps.event.OVERLAY_CLICK, groundOverlayOptions.onClick);\n        }\n        if (typeof callback === \"function\") {\n            callback.call(self, groundOverlay, self);\n        }\n    }, self.errorHandler, PLUGIN_NAME, 'exec', ['GroundOverlay.createGroundOverlay', self.deleteFromObject(groundOverlayOptions,'function')]);\n\n};\n\n//-------------\n// KML Layer\n//-------------\nApp.prototype.addKmlOverlay = function(kmlOverlayOptions, callback) {\n    var self = this;\n    kmlOverlayOptions = kmlOverlayOptions || {};\n    kmlOverlayOptions.url = kmlOverlayOptions.url || null;\n    kmlOverlayOptions.preserveViewport = kmlOverlayOptions.preserveViewport  === true;\n    kmlOverlayOptions.animation = kmlOverlayOptions.animation === undefined ? true : kmlOverlayOptions.animation;\n\n    var kmlId = \"kml\" + (Math.random() * 9999999);\n    kmlOverlayOptions.kmlId = kmlId;\n\n    var kmlOverlay = new KmlOverlay(self, kmlId, kmlOverlayOptions);\n    OVERLAYS[kmlId] = kmlOverlay;\n    KML_LAYERS[kmlId] = kmlOverlay;\n\n    cordova.exec(function(kmlId) {\n        if (typeof callback === \"function\") {\n            callback.call(self, kmlOverlay, self);\n        }\n    }, self.errorHandler, PLUGIN_NAME, 'exec', ['KmlOverlay.createKmlOverlay', self.deleteFromObject(kmlOverlayOptions,'function')]);\n\n};\n//-------------\n// Geocoding\n//-------------\nApp.prototype.geocode = function(geocoderRequest, callback) {\n    console.log(\"Map.geocode will be deprecated. Please use Geocoder.geocode instead.\");\n    Geocoder.geocode(geocoderRequest, callback);\n};\n/********************************************************************************\n * @name CameraPosition\n * @class This class represents new camera position\n * @property {LatLng} target The location where you want to show\n * @property {Number} [tilt] View angle\n * @property {Number} [zoom] Zoom level\n * @property {Number} [bearing] Map orientation\n * @property {Number} [duration] The duration of animation\n *******************************************************************************/\nvar CameraPosition = function(params) {\n    var self = this;\n    self.zoom = params.zoom;\n    self.tilt = params.tilt;\n    self.target = params.target;\n    self.bearing = params.bearing;\n    self.hashCode = params.hashCode;\n    self.duration = params.duration;\n};\n/*****************************************************************************\n * Location Class\n *****************************************************************************/\nvar Location = function(params) {\n    var self = this;\n    self.latLng = params.latLng || new LatLng(params.lat || 0, params.lng || 0);\n    self.elapsedRealtimeNanos = params.elapsedRealtimeNanos;\n    self.time = params.time;\n    self.accuracy = params.accuracy || null;\n    self.bearing = params.bearing || null;\n    self.altitude = params.altitude || null;\n    self.speed = params.speed || null;\n    self.provider = params.provider;\n    self.hashCode = params.hashCode;\n};\n\n/*******************************************************************************\n * @name LatLng\n * @class This class represents new camera position\n * @param {Number} latitude\n * @param {Number} longitude\n ******************************************************************************/\nvar LatLng = function(latitude, longitude) {\n    var self = this;\n    /**\n     * @property {Number} latitude\n     */\n    self.lat = parseFloat(latitude || 0, 10);\n\n    /**\n     * @property {Number} longitude\n     */\n    self.lng = parseFloat(longitude || 0, 10);\n\n    /**\n     * Comparison function.\n     * @method\n     * @return {Boolean}\n     */\n    self.equals = function(other) {\n        other = other || {};\n        return other.lat === self.lat &&\n            other.lng === self.lng;\n    };\n\n    /**\n     * @method\n     * @return {String} latitude,lontitude\n     */\n    self.toString = function() {\n        return self.lat + \",\" + self.lng;\n    };\n\n    /**\n     * @method\n     * @param {Number}\n     * @return {String} latitude,lontitude\n     */\n    self.toUrlValue = function(precision) {\n        precision = precision || 6;\n        return self.lat.toFixed(precision) + \",\" + self.lng.toFixed(precision);\n    };\n};\n\n/*****************************************************************************\n * Marker Class\n *****************************************************************************/\nvar Marker = function(map, id, markerOptions) {\n    BaseClass.apply(this);\n\n    var self = this;\n\n    Object.defineProperty(self, \"map\", {\n        value: map,\n        writable: false\n    });\n    Object.defineProperty(self, \"hashCode\", {\n        value: markerOptions.hashCode,\n        writable: false\n    });\n    Object.defineProperty(self, \"id\", {\n        value: id,\n        writable: false\n    });\n    Object.defineProperty(self, \"type\", {\n        value: \"Marker\",\n        writable: false\n    });\n\n    var ignores = [\"hashCode\", \"id\", \"hashCode\", \"type\"];\n    for (var key in markerOptions) {\n        if (ignores.indexOf(key) === -1) {\n            self.set(key, markerOptions[key]);\n        }\n    }\n};\nMarker.prototype = new BaseClass();\n\nMarker.prototype.isVisible = function() {\n    return this.get('visible');\n};\n\n\nMarker.prototype.getPosition = function(callback) {\n    var self = this;\n    cordova.exec(function(latlng) {\n        if (typeof callback === \"function\") {\n            callback.call(self, new LatLng(latlng.lat, latlng.lng));\n        }\n    }, self.errorHandler, PLUGIN_NAME, 'exec', ['Marker.getPosition', this.getId()]);\n};\nMarker.prototype.getId = function() {\n    return this.id;\n};\nMarker.prototype.getMap = function() {\n    return this.map;\n};\nMarker.prototype.getHashCode = function() {\n    return this.hashCode;\n};\n\nMarker.prototype.setAnimation = function(animation, callback) {\n    var self = this;\n\n    animation = animation || null;\n    if (!animation) {\n        return;\n    }\n    this.set(\"animation\", animation);\n\n    cordova.exec(function() {\n        if (typeof callback === \"function\") {\n            callback.call(self);\n        }\n    }, this.errorHandler, PLUGIN_NAME, 'exec', ['Marker.setAnimation', this.getId(), self.deleteFromObject(animation,'function')]);\n};\n\nMarker.prototype.remove = function(callback) {\n    var self = this;\n    self.set(\"keepWatching\", false);\n    delete MARKERS[this.id];\n    cordova.exec(function() {\n        if (typeof callback === \"function\") {\n            callback.call(self);\n        }\n    }, this.errorHandler, PLUGIN_NAME, 'exec', ['Marker.remove', this.getId()]);\n    this.off();\n};\nMarker.prototype.setDisableAutoPan = function(disableAutoPan) {\n    disableAutoPan = parseBoolean(disableAutoPan);\n    this.set('disableAutoPan', disableAutoPan);\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['Marker.setDisableAutoPan', this.getId(), disableAutoPan]);\n};\nMarker.prototype.getParams = function() {\n    return this.get('params');\n};\nMarker.prototype.setOpacity = function(opacity) {\n    if (!opacity && opacity !== 0) {\n        console.log('opacity value must be int or double');\n        return false;\n    }\n    this.set('opacity', opacity);\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['Marker.setOpacity', this.getId(), opacity]);\n};\nMarker.prototype.setZIndex = function(zIndex) {\n    if (typeof zIndex === 'undefined') {\n        return false;\n    }\n    this.set('zIndex', zIndex);\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['Marker.setZIndex', this.getId(), zIndex]);\n};\nMarker.prototype.getOpacity = function() {\n    return this.get('opacity');\n};\nMarker.prototype.setIconAnchor = function(anchorX, anchorY) {\n    this.set('anchor', [anchorX, anchorY]);\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['Marker.setIconAnchor', this.getId(), anchorX, anchorY]);\n};\nMarker.prototype.setInfoWindowAnchor = function(anchorX, anchorY) {\n    this.set('anchor', [anchorX, anchorY]);\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['Marker.setInfoWindowAnchor', this.getId(), anchorX, anchorY]);\n};\nMarker.prototype.setDraggable = function(draggable) {\n    draggable = parseBoolean(draggable);\n    this.set('draggable', draggable);\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['Marker.setDraggable', this.getId(), draggable]);\n};\nMarker.prototype.isDraggable = function() {\n    return this.get('draggable');\n};\nMarker.prototype.setFlat = function(flat) {\n    flat = parseBoolean(flat);\n    this.set('flat', flat);\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['Marker.setFlat', this.getId(), flat]);\n};\nMarker.prototype.setIcon = function(url) {\n    if (url && isHTMLColorString(url)) {\n        url = HTMLColor2RGBA(url);\n    }\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['Marker.setIcon', this.getId(), url]);\n};\nMarker.prototype.setTitle = function(title) {\n    if (!title) {\n        console.log('missing value for title');\n        return false;\n    }\n    this.set('title', String(title));\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['Marker.setTitle', this.getId(), title]);\n};\nMarker.prototype.setVisible = function(visible) {\n    visible = parseBoolean(visible);\n    this.set('visible', visible);\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['Marker.setVisible', this.getId(), visible]);\n};\nMarker.prototype.getTitle = function() {\n    return this.get('title');\n};\nMarker.prototype.setSnippet = function(snippet) {\n    this.set('snippet', snippet);\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['Marker.setSnippet', this.getId(), snippet]);\n};\nMarker.prototype.getSnippet = function() {\n    return this.get('snippet');\n};\nMarker.prototype.setRotation = function(rotation) {\n    if (!rotation) {\n        console.log('missing value for rotation');\n        return false;\n    }\n    this.set('rotation', rotation);\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['Marker.setRotation', this.getId(), rotation]);\n};\nMarker.prototype.getRotation = function() {\n    return this.get('rotation');\n};\nMarker.prototype.showInfoWindow = function() {\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['Marker.showInfoWindow', this.getId()]);\n};\nMarker.prototype.hideInfoWindow = function() {\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['Marker.hideInfoWindow', this.getId()]);\n};\nMarker.prototype.isInfoWindowShown = function(callback) {\n    var self = this;\n    cordova.exec(function(isVisible) {\n        isVisible = parseBoolean(isVisible);\n        if (typeof callback === \"function\") {\n            callback.call(self, isVisible);\n        }\n    }, self.errorHandler, PLUGIN_NAME, 'exec', ['Marker.isInfoWindowShown', this.getId()]);\n};\nMarker.prototype.isVisible = function() {\n    return this.get(\"visible\");\n};\n\nMarker.prototype.setPosition = function(position) {\n    if (!position) {\n        console.log('missing value for position');\n        return false;\n    }\n    this.set('position', position);\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['Marker.setPosition', this.getId(), position.lat, position.lng]);\n};\n\n\n/*****************************************************************************\n * Circle Class\n *****************************************************************************/\nvar Circle = function(map, circleId, circleOptions) {\n    BaseClass.apply(this);\n\n    var self = this;\n    Object.defineProperty(self, \"map\", {\n        value: map,\n        writable: false\n    });\n    Object.defineProperty(self, \"id\", {\n        value: circleId,\n        writable: false\n    });\n    Object.defineProperty(self, \"type\", {\n        value: \"Circle\",\n        writable: false\n    });\n\n    var ignores = [\"map\", \"id\", \"type\"];\n    for (var key in circleOptions) {\n        if (ignores.indexOf(key) === -1) {\n            self.set(key, circleOptions[key]);\n        }\n    }\n};\n\nCircle.prototype = new BaseClass();\n\nCircle.prototype.getMap = function() {\n    return this.map;\n};\nCircle.prototype.getId = function() {\n    return this.id;\n};\nCircle.prototype.getCenter = function() {\n    return this.get('center');\n};\nCircle.prototype.getRadius = function() {\n    return this.get('radius');\n};\nCircle.prototype.getStrokeColor = function() {\n    return this.get('strokeColor');\n};\nCircle.prototype.getStrokeWidth = function() {\n    return this.get('strokeWidth');\n};\nCircle.prototype.getZIndex = function() {\n    return this.get('zIndex');\n};\nCircle.prototype.getVisible = function() {\n    return this.get('visible');\n};\nCircle.prototype.remove = function() {\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['Circle.remove', this.getId()]);\n    this.off();\n};\nCircle.prototype.setCenter = function(center) {\n    this.set('center', center);\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['Circle.setCenter', this.getId(), center.lat, center.lng]);\n};\nCircle.prototype.setFillColor = function(color) {\n    this.set('fillColor', color);\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['Circle.setFillColor', this.getId(), HTMLColor2RGBA(color, 0.75)]);\n};\nCircle.prototype.setStrokeColor = function(color) {\n    this.set('strokeColor', color);\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['Circle.setStrokeColor', this.getId(), HTMLColor2RGBA(color, 0.75)]);\n};\nCircle.prototype.setStrokeWidth = function(width) {\n    this.set('strokeWidth', width);\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['Circle.setStrokeWidth', this.getId(), width]);\n};\nCircle.prototype.setVisible = function(visible) {\n    visible = parseBoolean(visible);\n    this.set('visible', visible);\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['Circle.setVisible', this.getId(), visible]);\n};\nCircle.prototype.setZIndex = function(zIndex) {\n    this.set('zIndex', zIndex);\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['Circle.setZIndex', this.getId(), zIndex]);\n};\nCircle.prototype.setRadius = function(radius) {\n    this.set('radius', radius);\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['Circle.setRadius', this.getId(), radius]);\n};\n/*****************************************************************************\n * Polyline Class\n *****************************************************************************/\nvar Polyline = function(map, polylineId, polylineOptions) {\n    BaseClass.apply(this);\n\n    var self = this;\n    Object.defineProperty(self, \"map\", {\n        value: map,\n        writable: false\n    });\n    Object.defineProperty(self, \"id\", {\n        value: polylineId,\n        writable: false\n    });\n    Object.defineProperty(self, \"type\", {\n        value: \"Polyline\",\n        writable: false\n    });\n\n    var ignores = [\"map\", \"id\", \"type\"];\n    for (var key in polylineOptions) {\n        if (ignores.indexOf(key) === -1) {\n            self.set(key, polylineOptions[key]);\n        }\n    }\n};\n\nPolyline.prototype = new BaseClass();\n\nPolyline.prototype.getId = function() {\n    return this.id;\n};\n\nPolyline.prototype.setPoints = function(points) {\n    this.set('points', points);\n    var i,\n        path = [];\n    for (i = 0; i < points.length; i++) {\n        path.push({\n            \"lat\": points[i].lat,\n            \"lng\": points[i].lng\n        });\n    }\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['Polyline.setPoints', this.getId(), path]);\n};\nPolyline.prototype.getPoints = function() {\n    return this.get(\"points\");\n};\nPolyline.prototype.setColor = function(color) {\n    this.set('color', color);\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['Polyline.setColor', this.getId(), HTMLColor2RGBA(color, 0.75)]);\n};\nPolyline.prototype.getColor = function() {\n    return this.get('color');\n};\nPolyline.prototype.setWidth = function(width) {\n    this.set('width', width);\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['Polyline.setWidth', this.getId(), width]);\n};\nPolyline.prototype.getWidth = function() {\n    return this.get('width');\n};\nPolyline.prototype.setVisible = function(visible) {\n    visible = parseBoolean(visible);\n    this.set('visible', visible);\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['Polyline.setVisible', this.getId(), visible]);\n};\nPolyline.prototype.getVisible = function() {\n    return this.get('visible');\n};\nPolyline.prototype.setGeodesic = function(geodesic) {\n    geodesic = parseBoolean(geodesic);\n    this.set('geodesic', geodesic);\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['Polyline.setGeodesic', this.getId(), geodesic]);\n};\nPolyline.prototype.getGeodesic = function() {\n    return this.get('geodesic');\n};\nPolyline.prototype.setZIndex = function(zIndex) {\n    this.set('zIndex', zIndex);\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['Polyline.setZIndex', this.getId(), zIndex]);\n};\nPolyline.prototype.getZIndex = function() {\n    return this.get('zIndex');\n};\nPolyline.prototype.remove = function() {\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['Polyline.remove', this.getId()]);\n    this.off();\n};\n\nPolyline.prototype.getMap = function() {\n    return this.map;\n};\n/*****************************************************************************\n * Polygon Class\n *****************************************************************************/\nvar Polygon = function(map, polygonId, polygonOptions) {\n    BaseClass.apply(this);\n\n    var self = this;\n    Object.defineProperty(self, \"map\", {\n        value: map,\n        writable: false\n    });\n    Object.defineProperty(self, \"id\", {\n        value: polygonId,\n        writable: false\n    });\n    Object.defineProperty(self, \"type\", {\n        value: \"Polygon\",\n        writable: false\n    });\n    var ignores = [\"map\", \"id\", \"type\"];\n    for (var key in polygonOptions) {\n        if (ignores.indexOf(key) === -1) {\n            self.set(key, polygonOptions[key]);\n        }\n    }\n};\n\nPolygon.prototype = new BaseClass();\n\nPolygon.prototype.getMap = function() {\n    return this.map;\n};\nPolygon.prototype.getId = function() {\n    return this.id;\n};\nPolygon.prototype.setPoints = function(points) {\n    this.set('points', points);\n    var i,\n        path = [];\n    for (i = 0; i < points.length; i++) {\n        path.push({\n            \"lat\": points[i].lat,\n            \"lng\": points[i].lng\n        });\n    }\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['Polygon.setPoints', this.getId(), path]);\n};\nPolygon.prototype.getPoints = function() {\n    return this.get(\"points\");\n};\nPolygon.prototype.setHoles = function(holes) {\n    this.set('holes', holes);\n    holes = holes || [];\n    if (holes.length > 0 && !Array.isArray(holes[0])) {\n      holes = [holes];\n    }\n    holes = holes.map(function(hole) {\n      if (!Array.isArray(hole)) {\n        return [];\n      }\n      return hole.map(function(latLng) {\n        return {lat: latLng.lat, lng: latLng.lng};\n      });\n    });\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['Polygon.setHoles', this.getId(), holes]);\n};\nPolygon.prototype.getHoles = function() {\n    return this.get(\"holes\");\n};\nPolygon.prototype.setFillColor = function(color) {\n    this.set('fillColor', color);\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['Polygon.setFillColor', this.getId(), HTMLColor2RGBA(color, 0.75)]);\n};\nPolygon.prototype.getFillColor = function() {\n    return this.get('fillColor');\n};\nPolygon.prototype.setStrokeColor = function(color) {\n    this.set('strokeColor', color);\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['Polygon.setStrokeColor', this.getId(), HTMLColor2RGBA(color, 0.75)]);\n};\nPolygon.prototype.getStrokeColor = function() {\n    return this.get('strokeColor');\n};\nPolygon.prototype.setStrokeWidth = function(width) {\n    this.set('strokeWidth', width);\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['Polygon.setStrokeWidth', this.getId(), width]);\n};\nPolygon.prototype.getStrokeWidth = function() {\n    return this.get('strokeWidth');\n};\nPolygon.prototype.setVisible = function(visible) {\n    visible = parseBoolean(visible);\n    this.set('visible', visible);\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['Polygon.setVisible', this.getId(), visible]);\n};\nPolygon.prototype.getVisible = function() {\n    return this.get('visible');\n};\nPolygon.prototype.setGeodesic = function(geodesic) {\n    geodesic = parseBoolean(geodesic);\n    this.set('geodesic', geodesic);\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['Polygon.setGeodesic', this.getId(), geodesic]);\n};\nPolygon.prototype.getGeodesic = function() {\n    return this.get('geodesic');\n};\nPolygon.prototype.setZIndex = function(zIndex) {\n    this.set('zIndex', zIndex);\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['Polygon.setZIndex', this.getId(), zIndex]);\n};\nPolygon.prototype.getZIndex = function() {\n    return this.get('zIndex');\n};\nPolygon.prototype.remove = function() {\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['Polygon.remove', this.getId()]);\n    this.off();\n};\n\n/*****************************************************************************\n * TileOverlay Class\n *****************************************************************************/\nvar TileOverlay = function(map, tileOverlayId, tileOverlayOptions) {\n    BaseClass.apply(this);\n\n    var self = this;\n    Object.defineProperty(self, \"id\", {\n        value: tileOverlayId,\n        writable: false\n    });\n    Object.defineProperty(self, \"type\", {\n        value: \"TileOverlay\",\n        writable: false\n    });\n    Object.defineProperty(self, \"map\", {\n        value: map,\n        writable: false\n    });\n    var ignores = [\"map\", \"id\", \"type\"];\n    for (var key in tileOverlayOptions) {\n        if (ignores.indexOf(key) === -1) {\n            self.set(key, tileOverlayOptions[key]);\n        }\n    }\n};\n\nTileOverlay.prototype = new BaseClass();\n\nTileOverlay.prototype.getMap = function() {\n    return this.map;\n};\nTileOverlay.prototype.clearTileCache = function() {\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['TileOverlay.clearTileCache', this.getId()]);\n};\nTileOverlay.prototype.getId = function() {\n    return this.id;\n};\nTileOverlay.prototype.getTileSize = function() {\n    return this.get(\"tileSize\");\n};\nTileOverlay.prototype.getZIndex = function() {\n    return this.get(\"zIndex\");\n};\nTileOverlay.prototype.setZIndex = function(zIndex) {\n    this.set('zIndex', zIndex);\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['TileOverlay.setZIndex', this.getId(), zIndex]);\n};\nTileOverlay.prototype.setFadeIn = function(fadeIn) {\n    fadeIn = parseBoolean(fadeIn);\n    this.set('fadeIn', fadeIn);\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['TileOverlay.setFadeIn', this.getId(), fadeIn]);\n};\nTileOverlay.prototype.getFadeIn = function() {\n    return this.get('fadeIn');\n};\nTileOverlay.prototype.setVisible = function(visible) {\n    visible = parseBoolean(visible);\n    this.set('visible', visible);\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['TileOverlay.setVisible', this.getId(), visible]);\n};\nTileOverlay.prototype.getOpacity = function() {\n    return this.get('opacity');\n};\nTileOverlay.prototype.setOpacity = function(opacity) {\n    if (!opacity && opacity !== 0) {\n        console.log('opacity value must be int or double');\n        return false;\n    }\n    this.set('opacity', opacity);\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['TileOverlay.setOpacity', this.getId(), opacity]);\n};\nTileOverlay.prototype.getVisible = function() {\n    return this.get('visible');\n};\nTileOverlay.prototype.remove = function() {\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['TileOverlay.remove', this.getId()]);\n    this.off();\n};\n\n/*****************************************************************************\n * GroundOverlay Class\n *****************************************************************************/\nvar GroundOverlay = function(map, groundOverlayId, groundOverlayOptions) {\n    BaseClass.apply(this);\n\n    var self = this;\n    groundOverlayOptions.visible = groundOverlayOptions.visible === undefined ? true : groundOverlayOptions.visible;\n    groundOverlayOptions.zIndex = groundOverlayOptions.zIndex || 1;\n    groundOverlayOptions.opacity = groundOverlayOptions.opacity || 1;\n    groundOverlayOptions.bounds = groundOverlayOptions.bounds || [];\n    groundOverlayOptions.anchor = groundOverlayOptions.anchor || [0, 0];\n    groundOverlayOptions.bearing = groundOverlayOptions.bearing || 0;\n    Object.defineProperty(self, \"id\", {\n        value: groundOverlayId,\n        writable: false\n    });\n    Object.defineProperty(self, \"type\", {\n        value: \"GroundOverlay\",\n        writable: false\n    });\n    Object.defineProperty(self, \"map\", {\n        value: map,\n        writable: false\n    });\n    var ignores = [\"map\", \"id\", \"type\"];\n    for (var key in groundOverlayOptions) {\n        if (ignores.indexOf(key) === -1) {\n            self.set(key, groundOverlayOptions[key]);\n        }\n    }\n};\n\nGroundOverlay.prototype = new BaseClass();\n\nGroundOverlay.prototype.getMap = function() {\n    return this.map;\n};\nGroundOverlay.prototype.getId = function() {\n    return this.id;\n};\nGroundOverlay.prototype.remove = function() {\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['GroundOverlay.remove', this.getId()]);\n    this.off();\n};\n\nGroundOverlay.prototype.setVisible = function(visible) {\n    this.set('visible', visible);\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['GroundOverlay.setVisible', this.getId(), visible]);\n};\n\nGroundOverlay.prototype.getVisible = function() {\n    return this.get('visible');\n};\n\nGroundOverlay.prototype.setImage = function(url) {\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['GroundOverlay.setImage', this.getId(), url]);\n};\n\nGroundOverlay.prototype.setBounds = function(points) {\n    this.set('bounds', points);\n    var i,\n        bounds = [];\n    for (i = 0; i < points.length; i++) {\n        bounds.push({\n            \"lat\": points[i].lat,\n            \"lng\": points[i].lng\n        });\n    }\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['GroundOverlay.setBounds', this.getId(), bounds]);\n};\n\nGroundOverlay.prototype.getOpacity = function() {\n    return this.get(\"opacity\");\n};\n\nGroundOverlay.prototype.getBearing = function() {\n    return this.get(\"bearing\");\n};\n\nGroundOverlay.prototype.setOpacity = function(opacity) {\n    if (!opacity && opacity !== 0) {\n        console.log('opacity value must be int or double');\n        return false;\n    }\n    this.set('opacity', opacity);\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['GroundOverlay.setOpacity', this.getId(), opacity]);\n};\nGroundOverlay.prototype.setBearing = function(bearing) {\n    this.set('bearing', bearing);\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['GroundOverlay.setBearing', this.getId(), bearing]);\n};\n\nGroundOverlay.prototype.getZIndex = function() {\n    return this.get(\"zIndex\");\n};\nGroundOverlay.prototype.setZIndex = function(zIndex) {\n    this.set('zIndex', zIndex);\n    cordova.exec(null, this.errorHandler, PLUGIN_NAME, 'exec', ['GroundOverlay.setZIndex', this.getId(), zIndex]);\n};\n/*****************************************************************************\n * KmlOverlay Class\n *****************************************************************************/\nvar KmlOverlay = function(map, kmlOverlayId, kmlOverlayOptions) {\n    BaseClass.apply(this);\n\n    var self = this;\n    self._overlays = [];\n    //self.set(\"visible\", kmlOverlayOptions.visible === undefined ? true : kmlOverlayOptions.visible);\n    //self.set(\"zIndex\", kmlOverlayOptions.zIndex || 0);\n    kmlOverlayOptions.animation = kmlOverlayOptions.animation === undefined ? true : kmlOverlayOptions.animation;\n    kmlOverlayOptions.preserveViewport = kmlOverlayOptions.preserveViewport  === true;\n    Object.defineProperty(self, \"id\", {\n        value: kmlOverlayId,\n        writable: false\n    });\n    Object.defineProperty(self, \"type\", {\n        value: \"KmlOverlay\",\n        writable: false\n    });\n    Object.defineProperty(self, \"map\", {\n        value: map,\n        writable: false\n    });\n    var ignores = [\"map\", \"id\", \"type\"];\n    for (var key in kmlOverlayOptions) {\n        if (ignores.indexOf(key) === -1) {\n            self.set(key, kmlOverlayOptions[key]);\n        }\n    }\n};\n\nKmlOverlay.prototype = new BaseClass();\n\nKmlOverlay.prototype.getOverlays = function() {\n    return this._overlays;\n};\nKmlOverlay.prototype.getMap = function() {\n    return this.map;\n};\nKmlOverlay.prototype.getId = function() {\n    return this.id;\n};\nKmlOverlay.prototype.remove = function() {\n    var layerId = this.id,\n        self = this;\n\n    this.trigger(\"_REMOVE\");\n    setTimeout(function() {\n        delete KML_LAYERS[layerId];\n        self.off();\n    }, 1000);\n};\n\n/*****************************************************************************\n * LatLngBounds Class\n *****************************************************************************/\nvar LatLngBounds = function() {\n    Object.defineProperty(this, \"type\", {\n        value: \"LatLngBounds\",\n        writable: false\n    });\n\n    var args = [];\n    if (arguments.length === 1 &&\n        typeof arguments[0] === \"object\" &&\n        \"push\" in arguments[0]) {\n        args = arguments[0];\n    } else {\n        args = Array.prototype.slice.call(arguments, 0);\n    }\n    for (var i = 0; i < args.length; i++) {\n        if (\"lat\" in args[i] && \"lng\" in args[i]) {\n            this.extend(args[i]);\n        }\n    }\n};\n\nLatLngBounds.prototype.northeast = null;\nLatLngBounds.prototype.southwest = null;\n\nLatLngBounds.prototype.toString = function() {\n    return \"[[\" + this.southwest.toString() + \"],[\" + this.northeast.toString() + \"]]\";\n};\nLatLngBounds.prototype.toUrlValue = function(precision) {\n    return \"[[\" + this.southwest.toUrlValue(precision) + \"],[\" + this.northeast.toUrlValue(precision) + \"]]\";\n};\n\nLatLngBounds.prototype.extend = function(latLng) {\n    if (\"lat\" in latLng && \"lng\" in latLng) {\n        if (!this.southwest && !this.northeast) {\n            this.southwest = latLng;\n            this.northeast = latLng;\n        } else {\n            var swLat = Math.min(latLng.lat, this.southwest.lat);\n            var swLng = Math.min(latLng.lng, this.southwest.lng);\n            var neLat = Math.max(latLng.lat, this.northeast.lat);\n            var neLng = Math.max(latLng.lng, this.northeast.lng);\n\n            delete this.southwest;\n            delete this.northeast;\n            this.southwest = new LatLng(swLat, swLng);\n            this.northeast = new LatLng(neLat, neLng);\n        }\n        this[0] = this.southwest;\n        this[1] = this.northeast;\n    }\n};\n\nLatLngBounds.prototype.getCenter = function() {\n    var centerLat = (this.southwest.lat + this.northeast.lat) / 2;\n\n    var swLng = this.southwest.lng;\n    var neLng = this.northeast.lng;\n    var sumLng = swLng + neLng;\n    var centerLng = sumLng / 2;\n\n    if ((swLng > 0 && neLng < 0 && sumLng < 180)) {\n        centerLng += sumLng > 0 ? -180 : 180;\n    }\n    return new LatLng(centerLat, centerLng);\n};\n\nLatLngBounds.prototype.contains = function(latLng) {\n    if (!(\"lat\" in latLng) || !(\"lng\" in latLng)) {\n        return false;\n    }\n    var SWLat = this.southwest.lat,\n        NELat = this.northeast.lat,\n        SWLng = this.southwest.lng,\n        NELng = this.northeast.lng;\n\n    if (SWLng > NELng) {\n        return (latLng.lat >= SWLat) && (latLng.lat <= NELat) &&\n            (((SWLng < latLng.lng) && (latLng.lng < 180)) || ((-180 < latLng.lng) && (latLng.lng < NELng)));\n    }\n    return (latLng.lat >= SWLat) && (latLng.lat <= NELat) &&\n        (latLng.lng >= SWLng) && (latLng.lng <= NELng);\n};\n\n/*****************************************************************************\n * Private functions\n *****************************************************************************/\n//---------------------------\n// Convert HTML color to RGB\n//---------------------------\nfunction isHTMLColorString(inputValue) {\n    if (!inputValue || typeof inputValue !== \"string\") {\n        return false;\n    }\n    if (inputValue.match(/^#[0-9A-F]{3}$/i) ||\n        inputValue.match(/^#[0-9A-F]{4}$/i) ||\n        inputValue.match(/^#[0-9A-F]{6}$/i) ||\n        inputValue.match(/^#[0-9A-F]{8}$/i) ||\n        inputValue.match(/^rgba?\\([\\d,.\\s]+\\)$/) ||\n        inputValue.match(/^hsla?\\([\\d%,.\\s]+\\)$/)) {\n        return true;\n    }\n\n    inputValue = inputValue.toLowerCase();\n    return inputValue in HTML_COLORS;\n}\n\nfunction HTMLColor2RGBA(colorValue, defaultOpacity) {\n    defaultOpacity = !defaultOpacity ? 1.0 : defaultOpacity;\n    if(colorValue instanceof Array) {\n        return colorValue;\n    }\n    if (colorValue === \"transparent\" || !colorValue) {\n        return [0, 0, 0, 0];\n    }\n    var alpha = Math.floor(255 * defaultOpacity),\n        matches,\n        result = {\n            r: 0,\n            g: 0,\n            b: 0\n        };\n    var colorStr = colorValue.toLowerCase();\n    if (colorStr in HTML_COLORS) {\n        colorStr = HTML_COLORS[colorStr];\n    }\n    if (colorStr.match(/^#([0-9A-F]){3}$/i)) {\n        matches = colorStr.match(/([0-9A-F])/ig);\n\n        return [\n            parseInt(matches[0], 16),\n            parseInt(matches[1], 16),\n            parseInt(matches[2], 16),\n            alpha\n        ];\n    }\n\n    if (colorStr.match(/^#[0-9A-F]{4}$/i)) {\n        alpha = colorStr.substr(4, 1);\n        alpha = parseInt(alpha + alpha, 16);\n\n        matches = colorStr.match(/([0-9A-F])/ig);\n        return [\n            parseInt(matches[0], 16),\n            parseInt(matches[1], 16),\n            parseInt(matches[2], 16),\n            alpha\n        ];\n    }\n\n    if (colorStr.match(/^#[0-9A-F]{6}$/i)) {\n        matches = colorStr.match(/([0-9A-F]{2})/ig);\n        return [\n            parseInt(matches[0], 16),\n            parseInt(matches[1], 16),\n            parseInt(matches[2], 16),\n            alpha\n        ];\n    }\n    if (colorStr.match(/^#[0-9A-F]{8}$/i)) {\n        matches = colorStr.match(/([0-9A-F]{2})/ig);\n\n        return [\n            parseInt(matches[0], 16),\n            parseInt(matches[1], 16),\n            parseInt(matches[2], 16),\n            parseInt(matches[3], 16)\n        ];\n    }\n    // convert rgb(), rgba()\n    if (colorStr.match(/^rgba?\\([\\d,.\\s]+\\)$/)) {\n        matches = colorStr.match(/([\\d.]+)/g);\n        alpha = matches.length == 4 ? Math.floor(parseFloat(matches[3]) * 256) : alpha;\n        return [\n            parseInt(matches[0], 10),\n            parseInt(matches[1], 10),\n            parseInt(matches[2], 10),\n            alpha\n        ];\n    }\n\n\n    // convert hsl(), hsla()\n    if (colorStr.match(/^hsla?\\([\\d%,.\\s]+\\)$/)) {\n        matches = colorStr.match(/([\\d%.]+)/g);\n        alpha = matches.length == 4 ? Math.floor(parseFloat(matches[3]) * 256) : alpha;\n        var rgb = HLStoRGB(matches[0], matches[1], matches[2]);\n        rgb.push(alpha);\n        return rgb;\n    }\n\n    console.log(\"Warning: '\" + colorValue + \"' is not available. The overlay is drew by black.\");\n    return [0, 0, 0, alpha];\n}\n\n/**\n * http://d.hatena.ne.jp/ja9/20100907/1283840213\n */\nfunction HLStoRGB(h, l, s) {\n    var r, g, b; // 0..255\n\n    while (h < 0) {\n        h += 360;\n    }\n    h = h % 360;\n\n    // In case of saturation = 0\n    if (s == 0) {\n        // RGB are the same as V\n        l = Math.round(l * 255);\n        return [l, l, l];\n    }\n\n    var m2 = (l < 0.5) ? l * (1 + s) : l + s - l * s,\n        m1 = l * 2 - m2,\n        tmp;\n\n    tmp = h + 120;\n    if (tmp > 360) {\n        tmp = tmp - 360;\n    }\n\n    if (tmp < 60) {\n        r = (m1 + (m2 - m1) * tmp / 60);\n    } else if (tmp < 180) {\n        r = m2;\n    } else if (tmp < 240) {\n        r = m1 + (m2 - m1) * (240 - tmp) / 60;\n    } else {\n        r = m1;\n    }\n\n    tmp = h;\n    if (tmp < 60) {\n        g = m1 + (m2 - m1) * tmp / 60;\n    } else if (tmp < 180) {\n        g = m2;\n    } else if (tmp < 240) {\n        g = m1 + (m2 - m1) * (240 - tmp) / 60;\n    } else {\n        g = m1;\n    }\n\n    tmp = h - 120;\n    if (tmp < 0) {\n        tmp = tmp + 360;\n    }\n    if (tmp < 60) {\n        b = m1 + (m2 - m1) * tmp / 60;\n    } else if (tmp < 180) {\n        b = m2;\n    } else if (tmp < 240) {\n        b = m1 + (m2 - m1) * (240 - tmp) / 60;\n    } else {\n        b = m1;\n    }\n    return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n}\n\nfunction parseBoolean(boolValue) {\n    return typeof(boolValue) === \"string\" && boolValue.toLowerCase() === \"true\" ||\n        boolValue === true ||\n        boolValue === 1;\n}\n\nfunction isDom(element) {\n    return !!element &&\n        typeof element === \"object\" &&\n        \"getBoundingClientRect\" in element;\n}\n\nfunction getPageRect() {\n    var doc = document.documentElement;\n\n    var pageWidth = window.innerWidth ||\n        document.documentElement.clientWidth ||\n        document.body.clientWidth,\n        pageHeight = window.innerHeight ||\n        document.documentElement.clientHeight ||\n        document.body.clientHeight;\n    var pageLeft = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);\n    var pageTop = (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);\n\n    return {\n        'width': pageWidth,\n        'height': pageHeight,\n        'left': pageLeft,\n        'top': pageTop\n    };\n}\n\nfunction getDivRect(div) {\n    if (!div) {\n        return;\n    }\n\n    var pageRect = getPageRect();\n\n    var rect = div.getBoundingClientRect();\n    var divRect = {\n        'left': rect.left + pageRect.left,\n        'top': rect.top + pageRect.top,\n        'width': rect.width,\n        'height': rect.height\n    };\n\n    return divRect;\n}\n\nfunction onMapResize(event) {\n    var self = window.plugin.google.maps.Map;\n    var div = self.get(\"div\");\n    if (!div) {\n        return;\n    }\n    if (isDom(div) === false) {\n        self.set(\"div\", null);\n        cordova.exec(null, self.errorHandler, PLUGIN_NAME, 'setDiv', []);\n    } else {\n        var args = [];\n        var element, elements = [];\n        var children = getAllChildren(div);\n        var elemId, clickable;\n\n        args.push(getDivRect(div));\n        for (var i = 0; i < children.length; i++) {\n            element = children[i];\n            if (element.nodeType != 1) {\n                continue;\n            }\n            clickable = element.getAttribute(\"data-clickable\");\n            if (clickable && parseBoolean(clickable) == false) {\n                continue;\n            }\n            elemId = element.getAttribute(\"__pluginDomId\");\n            if (!elemId) {\n                elemId = \"pgm\" + Math.floor(Math.random() * Date.now()) + i;\n                element.setAttribute(\"__pluginDomId\", elemId);\n            }\n            elements.push({\n                id: elemId,\n                size: getDivRect(element)\n            });\n        }\n        args.push(elements);\n        //alert(JSON.stringify(getDivRect(div), null, 4));\n        cordova.exec(null, null, PLUGIN_NAME, 'resizeMap', args);\n    }\n\n}\n/*****************************************************************************\n * External service\n *****************************************************************************/\nvar externalService = {};\n\nexternalService.launchNavigation = function(params) {\n    params = params || {};\n    if (!params.from || !params.to) {\n        return;\n    }\n    if (typeof params.from === \"object\" && \"toUrlValue\" in params.from) {\n        params.from = params.from.toUrlValue();\n    }\n    if (typeof params.to === \"object\" && \"toUrlValue\" in params.to) {\n        params.to = params.to.toUrlValue();\n    }\n    //params.from = params.from.replace(/\\s+/g, \"%20\");\n    //params.to = params.to.replace(/\\s+/g, \"%20\");\n    cordova.exec(null, null, \"External\", 'launchNavigation', [params]);\n};\n/*****************************************************************************\n * Geocoder class\n *****************************************************************************/\nvar Geocoder = {};\n\nGeocoder.geocode = function(geocoderRequest, callback) {\n    geocoderRequest = geocoderRequest || {};\n\n    if (\"position\" in geocoderRequest) {\n        geocoderRequest.position.lat = geocoderRequest.position.lat || 0.0;\n        geocoderRequest.position.lng = geocoderRequest.position.lng || 0.0;\n    }\n    var pluginExec = function() {\n        cordova.exec(function(results) {\n            if (typeof callback === \"function\") {\n                callback(results);\n            }\n        }, function(error) {\n            if (typeof callback === \"function\") {\n                callback([], error);\n            }\n        }, \"Geocoder\", 'geocode', [geocoderRequest]);\n    };\n\n    pluginExec();\n};\n\n/*****************************************************************************\n * Watch dog timer for child elements\n *****************************************************************************/\nvar _mapInstance = new App();\n\nwindow._watchDogTimer = null;\n_mapInstance.addEventListener(\"keepWatching_changed\", function(oldValue, newValue) {\n    if (newValue !== true) {\n        return;\n    }\n    var prevSize = null;\n    var children;\n    var prevChildrenCnt = 0;\n    var divSize, childCnt = 0;\n    if (window._watchDogTimer) {\n        clearInterval(window._watchDogTimer);\n    }\n\n    function init() {\n        window._watchDogTimer = window.setInterval(function() {\n            myFunc();\n        }, _mapInstance.getWatchDogTimer());\n    }\n\n    function myFunc() {\n        var div = module.exports.Map.get(\"div\");\n        if (div) {\n            children = getAllChildren(div);\n            childCnt = children.length;\n            if (childCnt != prevChildrenCnt) {\n                onMapResize();\n                prevChildrenCnt = childCnt;\n                watchDogTimer = setTimeout(myFunc, 100);\n                return;\n            }\n            prevChildrenCnt = childCnt;\n            divSize = getDivRect(div);\n            if (prevSize) {\n                if (divSize.left != prevSize.left ||\n                    divSize.top != prevSize.top ||\n                    divSize.width != prevSize.width ||\n                    divSize.height != prevSize.height) {\n                    onMapResize();\n                }\n            }\n            prevSize = divSize;\n        }\n        div = null;\n        divSize = null;\n        childCnt = null;\n        children = null;\n        clearInterval(window._watchDogTimer);\n        init();\n    }\n    init();\n});\n\n_mapInstance.addEventListener(\"keepWatching_changed\", function(oldValue, newValue) {\n    if (newValue !== false) {\n        return;\n    }\n    if (window._watchDogTimer) {\n        clearInterval(window._watchDogTimer);\n    }\n    window._watchDogTimer = null;\n});\n\n/*****************************************************************************\n * geometry Encode / decode points\n * http://jsfiddle.net/8nzg7tta/\n *****************************************************************************/\n//decode function\nfunction decodePath(encoded, precision) {\n    precision = precision || 5;\n    precision = Math.pow(10, -precision);\n    var len = encoded.length,\n        index = 0,\n        lat = 0,\n        lng = 0,\n        array = [];\n    while (index < len) {\n        var b, shift = 0,\n            result = 0;\n        do {\n            b = encoded.charCodeAt(index++) - 63;\n            result |= (b & 0x1f) << shift;\n            shift += 5;\n        } while (b >= 0x20);\n        var dlat = ((result & 1) ? ~(result >> 1) : (result >> 1));\n        lat += dlat;\n        shift = 0;\n        result = 0;\n        do {\n            b = encoded.charCodeAt(index++) - 63;\n            result |= (b & 0x1f) << shift;\n            shift += 5;\n        } while (b >= 0x20);\n        var dlng = ((result & 1) ? ~(result >> 1) : (result >> 1));\n        lng += dlng;\n        array.push(new plugin.google.maps.LatLng(lat * precision, lng * precision));\n    }\n    return array;\n}\n\n//encode functions\nfunction encodePath(points) {\n    var plat = 0;\n    var plng = 0;\n    var encoded_points = \"\";\n\n    for (var i = 0; i < points.length; ++i) {\n        encoded_points += encodePoint(plat, plng, points[i].lat, points[i].lng);\n        plat = points[i].lat;\n        plng = points[i].lng;\n    }\n\n    return encoded_points;\n}\n\nfunction encodePoint(plat, plng, lat, lng) {\n    var late5 = Math.round(lat * 1e5);\n    var plate5 = Math.round(plat * 1e5);\n\n    var lnge5 = Math.round(lng * 1e5);\n    var plnge5 = Math.round(plng * 1e5);\n\n    dlng = lnge5 - plnge5;\n    dlat = late5 - plate5;\n\n    return encodeSignedNumber(dlat) + encodeSignedNumber(dlng);\n}\n\nfunction encodeSignedNumber(num) {\n    var sgn_num = num << 1;\n\n    if (num < 0) {\n        sgn_num = ~(sgn_num);\n    }\n\n    return (encodeNumber(sgn_num));\n}\n\nfunction encodeNumber(num) {\n    var encodeString = \"\";\n\n    while (num >= 0x20) {\n        encodeString += (String.fromCharCode((0x20 | (num & 0x1f)) + 63));\n        num >>= 5;\n    }\n\n    encodeString += (String.fromCharCode(num + 63));\n    return encodeString;\n}\n\n/*****************************************************************************\n * Name space\n *****************************************************************************/\nmodule.exports = {\n    event: {\n        MAP_CLICK: 'click',\n        MAP_LONG_CLICK: 'long_click',\n        MY_LOCATION_CHANGE: 'my_location_change', // for Android\n        MY_LOCATION_BUTTON_CLICK: 'my_location_button_click',\n        INDOOR_BUILDING_FOCUSED: 'indoor_building_focused',\n        INDOOR_LEVEL_ACTIVATED: 'indoor_level_activated',\n        CAMERA_CHANGE: 'camera_change',\n        CAMERA_IDLE: 'camera_idle', //for iOS\n        MAP_READY: 'map_ready',\n        MAP_LOADED: 'map_loaded', //for Android\n        MAP_WILL_MOVE: 'will_move', //for iOS\n        MAP_CLOSE: 'map_close',\n        MARKER_CLICK: 'click',\n        OVERLAY_CLICK: 'overlay_click',\n        INFO_CLICK: 'info_click',\n        MARKER_DRAG: 'drag',\n        MARKER_DRAG_START: 'drag_start',\n        MARKER_DRAG_END: 'drag_end'\n    },\n    Animation: {\n        BOUNCE: 'BOUNCE',\n        DROP: 'DROP'\n    },\n\n    BaseClass: BaseClass,\n    Map: _mapInstance,\n    LatLng: LatLng,\n    LatLngBounds: LatLngBounds,\n    Marker: Marker,\n    MapTypeId: {\n        'NORMAL': 'MAP_TYPE_NORMAL',\n        'ROADMAP': 'MAP_TYPE_NORMAL',\n        'SATELLITE': 'MAP_TYPE_SATELLITE',\n        'HYBRID': 'MAP_TYPE_HYBRID',\n        'TERRAIN': 'MAP_TYPE_TERRAIN',\n        'NONE': 'MAP_TYPE_NONE'\n    },\n    external: externalService,\n    Geocoder: Geocoder,\n    geometry: {\n        encoding: {\n            decodePath: decodePath,\n            encodePath: encodePath\n        }\n    }\n};\n\ncordova.addConstructor(function() {\n    if (!window.Cordova) {\n        window.Cordova = cordova;\n    };\n    window.plugin = window.plugin || {};\n    window.plugin.google = window.plugin.google || {};\n    window.plugin.google.maps = window.plugin.google.maps || module.exports;\n});\nwindow.addEventListener(\"orientationchange\", function() {\n    setTimeout(onMapResize, 1000);\n});\n\n\nfunction getAllChildren(root) {\n    var list = [];\n    var clickable;\n    var style, displayCSS, opacityCSS, visibilityCSS;\n    var search = function(node) {\n        while (node != null) {\n            if (node.nodeType == 1) {\n                style = window.getComputedStyle(node);\n                visibilityCSS = style.getPropertyValue('visibility');\n                displayCSS = style.getPropertyValue('display');\n                opacityCSS = style.getPropertyValue('opacity');\n                if (displayCSS !== \"none\" && opacityCSS > 0 && visibilityCSS != \"hidden\") {\n                    clickable = node.getAttribute(\"data-clickable\");\n                    if (clickable &&\n                        clickable.toLowerCase() === \"false\" &&\n                        node.hasChildNodes()) {\n                        Array.prototype.push.apply(list, getAllChildren(node));\n                    } else {\n                        list.push(node);\n                    }\n                }\n            }\n            node = node.nextSibling;\n        }\n    };\n    for (var i = 0; i < root.childNodes.length; i++) {\n        search(root.childNodes[i]);\n    }\n    return list;\n}\n\n\ndocument.addEventListener(\"deviceready\", function() {\n    document.removeEventListener(\"deviceready\", arguments.callee);\n    plugin.google.maps.Map.isAvailable();\n});\n\nvar HTML_COLORS = {\n    \"aliceblue\": \"#f0f8ff\",\n    \"antiquewhite\": \"#faebd7\",\n    \"aqua\": \"#00ffff\",\n    \"aquamarine\": \"#7fffd4\",\n    \"azure\": \"#f0ffff\",\n    \"beige\": \"#f5f5dc\",\n    \"bisque\": \"#ffe4c4\",\n    \"black\": \"#000000\",\n    \"blanchedalmond\": \"#ffebcd\",\n    \"blue\": \"#0000ff\",\n    \"blueviolet\": \"#8a2be2\",\n    \"brown\": \"#a52a2a\",\n    \"burlywood\": \"#deb887\",\n    \"cadetblue\": \"#5f9ea0\",\n    \"chartreuse\": \"#7fff00\",\n    \"chocolate\": \"#d2691e\",\n    \"coral\": \"#ff7f50\",\n    \"cornflowerblue\": \"#6495ed\",\n    \"cornsilk\": \"#fff8dc\",\n    \"crimson\": \"#dc143c\",\n    \"cyan\": \"#00ffff\",\n    \"darkblue\": \"#00008b\",\n    \"darkcyan\": \"#008b8b\",\n    \"darkgoldenrod\": \"#b8860b\",\n    \"darkgray\": \"#a9a9a9\",\n    \"darkgrey\": \"#a9a9a9\",\n    \"darkgreen\": \"#006400\",\n    \"darkkhaki\": \"#bdb76b\",\n    \"darkmagenta\": \"#8b008b\",\n    \"darkolivegreen\": \"#556b2f\",\n    \"darkorange\": \"#ff8c00\",\n    \"darkorchid\": \"#9932cc\",\n    \"darkred\": \"#8b0000\",\n    \"darksalmon\": \"#e9967a\",\n    \"darkseagreen\": \"#8fbc8f\",\n    \"darkslateblue\": \"#483d8b\",\n    \"darkslategray\": \"#2f4f4f\",\n    \"darkslategrey\": \"#2f4f4f\",\n    \"darkturquoise\": \"#00ced1\",\n    \"darkviolet\": \"#9400d3\",\n    \"deeppink\": \"#ff1493\",\n    \"deepskyblue\": \"#00bfff\",\n    \"dimgray\": \"#696969\",\n    \"dimgrey\": \"#696969\",\n    \"dodgerblue\": \"#1e90ff\",\n    \"firebrick\": \"#b22222\",\n    \"floralwhite\": \"#fffaf0\",\n    \"forestgreen\": \"#228b22\",\n    \"fuchsia\": \"#ff00ff\",\n    \"gainsboro\": \"#dcdcdc\",\n    \"ghostwhite\": \"#f8f8ff\",\n    \"gold\": \"#ffd700\",\n    \"goldenrod\": \"#daa520\",\n    \"gray\": \"#808080\",\n    \"grey\": \"#808080\",\n    \"green\": \"#008000\",\n    \"greenyellow\": \"#adff2f\",\n    \"honeydew\": \"#f0fff0\",\n    \"hotpink\": \"#ff69b4\",\n    \"indianred \": \"#cd5c5c\",\n    \"indigo  \": \"#4b0082\",\n    \"ivory\": \"#fffff0\",\n    \"khaki\": \"#f0e68c\",\n    \"lavender\": \"#e6e6fa\",\n    \"lavenderblush\": \"#fff0f5\",\n    \"lawngreen\": \"#7cfc00\",\n    \"lemonchiffon\": \"#fffacd\",\n    \"lightblue\": \"#add8e6\",\n    \"lightcoral\": \"#f08080\",\n    \"lightcyan\": \"#e0ffff\",\n    \"lightgoldenrodyellow\": \"#fafad2\",\n    \"lightgray\": \"#d3d3d3\",\n    \"lightgrey\": \"#d3d3d3\",\n    \"lightgreen\": \"#90ee90\",\n    \"lightpink\": \"#ffb6c1\",\n    \"lightsalmon\": \"#ffa07a\",\n    \"lightseagreen\": \"#20b2aa\",\n    \"lightskyblue\": \"#87cefa\",\n    \"lightslategray\": \"#778899\",\n    \"lightslategrey\": \"#778899\",\n    \"lightsteelblue\": \"#b0c4de\",\n    \"lightyellow\": \"#ffffe0\",\n    \"lime\": \"#00ff00\",\n    \"limegreen\": \"#32cd32\",\n    \"linen\": \"#faf0e6\",\n    \"magenta\": \"#ff00ff\",\n    \"maroon\": \"#800000\",\n    \"mediumaquamarine\": \"#66cdaa\",\n    \"mediumblue\": \"#0000cd\",\n    \"mediumorchid\": \"#ba55d3\",\n    \"mediumpurple\": \"#9370db\",\n    \"mediumseagreen\": \"#3cb371\",\n    \"mediumslateblue\": \"#7b68ee\",\n    \"mediumspringgreen\": \"#00fa9a\",\n    \"mediumturquoise\": \"#48d1cc\",\n    \"mediumvioletred\": \"#c71585\",\n    \"midnightblue\": \"#191970\",\n    \"mintcream\": \"#f5fffa\",\n    \"mistyrose\": \"#ffe4e1\",\n    \"moccasin\": \"#ffe4b5\",\n    \"navajowhite\": \"#ffdead\",\n    \"navy\": \"#000080\",\n    \"oldlace\": \"#fdf5e6\",\n    \"olive\": \"#808000\",\n    \"olivedrab\": \"#6b8e23\",\n    \"orange\": \"#ffa500\",\n    \"orangered\": \"#ff4500\",\n    \"orchid\": \"#da70d6\",\n    \"palegoldenrod\": \"#eee8aa\",\n    \"palegreen\": \"#98fb98\",\n    \"paleturquoise\": \"#afeeee\",\n    \"palevioletred\": \"#db7093\",\n    \"papayawhip\": \"#ffefd5\",\n    \"peachpuff\": \"#ffdab9\",\n    \"peru\": \"#cd853f\",\n    \"pink\": \"#ffc0cb\",\n    \"plum\": \"#dda0dd\",\n    \"powderblue\": \"#b0e0e6\",\n    \"purple\": \"#800080\",\n    \"rebeccapurple\": \"#663399\",\n    \"red\": \"#ff0000\",\n    \"rosybrown\": \"#bc8f8f\",\n    \"royalblue\": \"#4169e1\",\n    \"saddlebrown\": \"#8b4513\",\n    \"salmon\": \"#fa8072\",\n    \"sandybrown\": \"#f4a460\",\n    \"seagreen\": \"#2e8b57\",\n    \"seashell\": \"#fff5ee\",\n    \"sienna\": \"#a0522d\",\n    \"silver\": \"#c0c0c0\",\n    \"skyblue\": \"#87ceeb\",\n    \"slateblue\": \"#6a5acd\",\n    \"slategray\": \"#708090\",\n    \"slategrey\": \"#708090\",\n    \"snow\": \"#fffafa\",\n    \"springgreen\": \"#00ff7f\",\n    \"steelblue\": \"#4682b4\",\n    \"tan\": \"#d2b48c\",\n    \"teal\": \"#008080\",\n    \"thistle\": \"#d8bfd8\",\n    \"tomato\": \"#ff6347\",\n    \"turquoise\": \"#40e0d0\",\n    \"violet\": \"#ee82ee\",\n    \"wheat\": \"#f5deb3\",\n    \"white\": \"#ffffff\",\n    \"whitesmoke\": \"#f5f5f5\",\n    \"yellow\": \"#ffff00\",\n    \"yellowgreen\": \"#9acd32\"\n};\n"}